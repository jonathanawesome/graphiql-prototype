"""
A group of usually domesticated animals presumably related by descent from common ancestors and visibly similar in most characters.
"""
type Breed {
  """
  An ISO 8601-formatted string representing the time a Breed was added to the system.
  """
  createdAt: DateTime

  """
  A unique identifier for a Breed within the MeowWoof system.
  """
  name: String!

  """
  A list of Pets of a breed.
  """
  pets: [Pet]

  """
  A Breed is of a single Species.
  """
  species: Species

  """
  A list of SubBreeds of a Breed
  """
  subBreeds: [SubBreed]

  """
  An ISO 8601-formatted string representing the time a Breed record was last updated.
  """
  updatedAt: DateTime
}

"""
A UI error used when a breed query fails to complete.
"""
type BreedError implements ErrorForUI {
  """
  A message specific to this error case.
  """
  message: String!

  """
  The path from which this error originated.
  """
  path: String!
}

"""
A union representing either a Breed object or a BreedError _object_ that implements a common UI error interface.
"""
union BreedResult = Breed | BreedError

"""
Arguments used when searching and/or filtering Breeds.
"""
input BreedsFilters {
  """
  A dummy1 argument of type Boolean.
  """
  dummy1: Boolean

  """
  A dummy2 argument of type Int.
  """
  dummy2: Int

  """
  A dummy3 argument of type String.
  """
  dummy3: String

  """
  A dummy4 argument of type ID.
  """
  dummy4: ID
  nested: NestedInput

  """
  An enum indicating the species.
  """
  species: Species!
}

"""
A UI error used when a createBreed mutation fails to complete.
"""
type CreateBreedError implements ErrorForUI {
  message: String!
  path: String!
}

"""
Required arguments when adding a new Breed to the system.
"""
input CreateBreedInput {
  """
  A unique name for this breed
  """
  name: String!

  """
  An enum indicating the species.
  """
  species: Species!
}

union CreateBreedResult = Breed | CreateBreedError

type CreatePersonError implements ErrorForUI {
  message: String!
  path: String!
}

"""
Required arguments when adding a new Person to the system.
"""
input CreatePersonInput {
  name: PersonName!
  type: PersonType!
}

union CreatePersonResult = CreatePersonError | Person

type CreatePetError implements ErrorForUI {
  message: String!
  path: String!
}

"""
Required arguments when adding a new Pet to the system.
"""
input CreatePetInput {
  breedName: String!
  name: String!
  ownerId: ID!
}

union CreatePetResult = CreatePetError | Pet

type CreateVisitError implements ErrorForUI {
  message: String!
  path: String!
}

union CreateVisitResult = CreateVisitError | Visit

scalar DateTime

"""
Arguments used when searching and/or filtering EMPLOYEEs.
"""
input EmployeesFilters {
  specificEmployeeIds: [ID!]!
}

"""
A common error interface to expose to clients.
"""
interface ErrorForUI {
  """
  A message specific to this error case.
  """
  message: String!

  """
  The path from which this error originated.
  """
  path: String!
}

type Mutation {
  """
  Adds a Breed to the MeowWoof system.
  """
  createBreed(input: CreateBreedInput!): CreateBreedResult!

  """
  Adds a Person to the MeowWoof system,
  """
  createPerson(input: CreatePersonInput!): CreatePersonResult!

  """
  Adds a Pet to the MeowWoof system,
  """
  createPet(input: CreatePetInput!): CreatePetResult!
  createVisit(input: VisitCreateInput!): CreateVisitResult!
}

"""
A nested InputType...do folks do this?
"""
input NestedInput {
  """
  arg1 argument of type Boolean.
  """
  arg1: Boolean

  """
  arg2 argument of type Int.
  """
  arg2: Int

  """
  arg3 argument of type String.
  """
  arg3: String

  """
  arg4 argument of type ID.
  """
  arg4: ID
}

"""
A Person can be either an employee of MeowWoof or a pet owner that brings their pet to MeowWoof.
"""
type Person {
  """
  An ISO 8601-formatted string representing the time this Person was added to the system.
  """
  createdAt: DateTime

  """
  All Persons in the system must be registered with a first name.
  """
  firstName: String

  """
  A unique identifier for this Person within the MeowWoof system.
  """
  id: ID!

  """
  All Persons in the system must be registered with a last name.
  """
  lastName: String

  """
  A list of pets owned by this PET_OWNER..
  """
  pets: [Pet]

  """
  A Person is either an EMPLOYEE or a PET_OWNER.
  """
  type: PersonType

  """
  An ISO 8601-formatted string representing the time this Person record was last updated.
  """
  updatedAt: DateTime

  """
  A list of past, active, and upcoming PET_OWNER visits to MeowWoof.
  """
  visits: [Visit]
}

type PersonError implements ErrorForUI {
  message: String!
  path: String!
}

"""
A common input for a Person's first and last name.
"""
input PersonName {
  firstName: String!
  lastName: String!
}

union PersonResult = Person | PersonError

"""
A Person is either an EMPLOYEE or a PET_OWNER.
"""
enum PersonType {
  EMPLOYEE
  PET_OWNER
}

"""
Arguments used when searching and/or filtering persons.
"""
input PersonsFilters {
  type: PersonType!
}

"""
A domesticated animal kept for pleasure rather than utility. A Pet has an owner, is of a specific breed, and possibly has visited MeowWoof.
"""
type Pet {
  """
  A Pet is of a breed.
  """
  breed: Breed

  """
  An ISO 8601-formatted string representing the time this Pet was added to the system.
  """
  createdAt: DateTime

  """
  A unique identifier for this Pet within the MeowWoof system.
  """
  id: ID!

  """
  A Pet has a name that is not unique in the MeowWoof system.
  """
  name: String

  """
  A Pet has one owner.
  """
  owner: Person

  """
  An ISO 8601-formatted string representing the time this Pet record was last updated.
  """
  updatedAt: DateTime

  """
  A Pet has possibly visited the MeowWoof veterinary clinic.
  """
  visits: [Visit]
}

type PetError implements ErrorForUI {
  message: String!
  path: String!
}

union PetResult = Pet | PetError

"""
Arguments used when searching and/or filtering Pets.
"""
input PetsFilters {
  breedName: String
  ownerId: ID
}

type Query {
  """
  Finds a Breed given a name. Returns a Breed object or an ErrorForUI.
  """
  breed(
    """
    A fake String argument used for testing.
    """
    fakeArg: String

    """
    A unique name for this breed
    """
    name: String!
  ): BreedResult!

  """
  Finds Breeds given specific input arguments. Returns an array of Breeds matching the input filters or an empty array.
  """
  breeds(input: BreedsFilters!, notRequiredInput: TestNotRequired, test: String): [Breed]!

  """
  Retrieves EMPLOYEEs only
  """
  employees(input: EmployeesFilters!): [Person]!

  """
  Finds a Person given an ID. Returns a Person object or an ErrorForUI.
  """
  person(id: ID!): PersonResult!

  """
  Finds Persons given specific input arguments. Returns an array of Persons matching the input filters or an empty array.
  """
  persons(input: PersonsFilters!): [Person]!

  """
  Finds a Pet given a name. Returns a Pet object or an ErrorForUI.
  """
  pet(id: ID!): PetResult!

  """
  Retrieves PET_OWNERs only
  """
  petOwners(limit: Int): [Person]!

  """
  Finds Pets given specific input arguments. Returns an array of Pets matching the input filters or an empty array.
  """
  pets(input: PetsFilters): [Pet]!
  visit(id: ID!): VisitResult!
  visits(input: VisitsFilters): [Visit]!
}

"""
An enum of possible Species
"""
enum Species {
  CAT
  DOG
}

type SubBreed {
  """
  The Breed to which a SubBreed belongs.
  """
  breed: Breed

  """
  An ISO 8601-formatted string representing the time a SubBreed was added to the system.
  """
  createdAt: DateTime

  """
  A unique identifier for a SubBreed within the MeowWoof system.
  """
  id: ID!

  """
  A non-unique name for a SubBreed.
  """
  name: String

  """
  An ISO 8601-formatted string representing the time a SubBreed record was last updated.
  """
  updatedAt: DateTime
}

"""
Not required Top Level Input Pbject
"""
input TestNotRequired {
  """
  A dummy1 argument of type Boolean.
  """
  dummy1: Boolean
}

type Visit {
  checkInTime: DateTime
  checkOutTime: DateTime
  createdAt: DateTime

  """
  A unique identifier for this Breed within the MeowWoof system.
  """
  id: ID!
  person: Person
  pet: Pet
  scheduledEnd: DateTime
  scheduledStart: DateTime
  status: VisitStatus
  totalCost: Float
  type: VisitType
  updatedAt: DateTime
}

input VisitCreateInput {
  personId: ID!
  petId: ID!
  scheduledStart: String!
  type: VisitType!
}

type VisitError implements ErrorForUI {
  message: String!
  path: String!
}

union VisitResult = Visit | VisitError

enum VisitStatus {
  COMPLETE
  IN_PROGRESS
  SCHEDULED
}

enum VisitType {
  CHECKUP
  EMERGENCY
}

input VisitsFilters {
  limit: Int
  visitStatus: VisitStatus
  visitType: VisitType
}
