type Breed {
  """
  An ISO 8601-formatted string representing the time this Breed was added to the system.
  """
  createdAt: DateTime

  """
  A unique identifier for this Breed within the MeowWoof system.
  """
  name: String!

  """
  A list of Pets of this breed.
  """
  pets: [Pet]

  """
  A Breed is of a single Species.
  """
  species: Species

  """
  A list of SubBreeds of this Breed
  """
  subBreeds: [SubBreed]

  """
  An ISO 8601-formatted string representing the time this Breed record was last updated.
  """
  updatedAt: DateTime
}

type BreedError implements ErrorForUI {
  message: String!
  path: String!
}

union BreedResult = Breed | BreedError

"""
Arguments used when searching and/or filtering Breeds.
"""
input BreedsFilters {
  species: Species!
}

type CreateBreedError implements ErrorForUI {
  message: String!
  path: String!
}

"""
Required arguments when adding a new Breed to the system.
"""
input CreateBreedInput {
  name: String!
  species: Species!
}

union CreateBreedResult = Breed | CreateBreedError

type CreatePersonError implements ErrorForUI {
  message: String!
  path: String!
}

"""
Required arguments when adding a new Person to the system.
"""
input CreatePersonInput {
  name: PersonName!
  type: PersonType!
}

union CreatePersonResult = CreatePersonError | Person

type CreatePetError implements ErrorForUI {
  message: String!
  path: String!
}

"""
Required arguments when adding a new Pet to the system.
"""
input CreatePetInput {
  breedName: String!
  name: String!
  ownerId: ID!
}

union CreatePetResult = CreatePetError | Pet

type CreateVisitError implements ErrorForUI {
  message: String!
  path: String!
}

union CreateVisitResult = CreateVisitError | Visit

scalar DateTime

"""
A common error interface to expose to clients
"""
interface ErrorForUI {
  message: String!
  path: String!
}

type Mutation {
  _: String

  """
  Adds a Breed to the MeowWoof system,
  """
  createBreed(input: CreateBreedInput!): CreateBreedResult!

  """
  Adds a Person to the MeowWoof system,
  """
  createPerson(input: CreatePersonInput!): CreatePersonResult!

  """
  Adds a Pet to the MeowWoof system,
  """
  createPet(input: CreatePetInput!): CreatePetResult!
  createVisit(input: VisitCreateInput!): CreateVisitResult!
}

"""
A Person can be either an employee of MeowWoof or a pet owner that brings their pet to MeowWoof.
"""
type Person {
  """
  An ISO 8601-formatted string representing the time this Person was added to the system.
  """
  createdAt: DateTime

  """
  All Persons in the system must be registered with a first name.
  """
  firstName: String

  """
  A unique identifier for this Person within the MeowWoof system.
  """
  id: ID!

  """
  All Persons in the system must be registered with a last name.
  """
  lastName: String

  """
  A list of pets owned by this PET_OWNER..
  """
  pets: [Pet]

  """
  A Person is either an EMPLOYEE or a PET_OWNER.
  """
  type: PersonType

  """
  An ISO 8601-formatted string representing the time this Person record was last updated.
  """
  updatedAt: DateTime

  """
  A list of past, active, and upcoming PET_OWNER visits to MeowWoof.
  """
  visits: [Visit]
}

type PersonError implements ErrorForUI {
  message: String!
  path: String!
}

"""
A common input for a Person's first and last name.
"""
input PersonName {
  firstName: String!
  lastName: String!
}

union PersonResult = Person | PersonError

"""
A Person is either an EMPLOYEE or a PET_OWNER.
"""
enum PersonType {
  EMPLOYEE
  PET_OWNER
}

"""
Arguments used when searching and/or filtering persons.
"""
input PersonsFilters {
  type: PersonType!
}

"""
A Pet has an owner, is of a specific breed, and possibly has visited MeowWoof.
"""
type Pet {
  """
  A Pet is of a breed.
  """
  breed: Breed

  """
  An ISO 8601-formatted string representing the time this Pet was added to the system.
  """
  createdAt: DateTime

  """
  A unique identifier for this Pet within the MeowWoof system.
  """
  id: String!

  """
  A Pet has a name that is not unique in the MeowWoof system.
  """
  name: String

  """
  A Pet has one owner.
  """
  owner: Person

  """
  An ISO 8601-formatted string representing the time this Pet record was last updated.
  """
  updatedAt: DateTime

  """
  A Pet has possibly visited the MeowWoof veterinary clinic.
  """
  visits: [Visit]
}

type PetError implements ErrorForUI {
  message: String!
  path: String!
}

union PetResult = Pet | PetError

"""
Arguments used when searching and/or filtering Pets.
"""
input PetsFilters {
  breedName: String
  ownerId: ID
}

type Query {
  _: String

  """
  Finds a Breed given a name. Returns a Breed object or an ErrorForUI.
  """
  breed(name: String!): BreedResult!

  """
  Finds Breeds given specific input arguments. Returns an array of Breeds matching the input filters or an empty array.
  """
  breeds(input: BreedsFilters!): [Breed]!

  """
  Finds a Person given an ID. Returns a Person object or an ErrorForUI.
  """
  person(id: ID!): PersonResult!

  """
  Finds Persons given specific input arguments. Returns an array of Persons matching the input filters or an empty array.
  """
  persons(input: PersonsFilters!): [Person]!

  """
  Finds a Pet given a name. Returns a Pet object or an ErrorForUI.
  """
  pet(id: ID!): PetResult!

  """
  Finds Pets given specific input arguments. Returns an array of Pets matching the input filters or an empty array.
  """
  pets(input: PetsFilters!): [Pet]!
  visit(id: String!): VisitResult!
  visits(input: VisitsFilters!): [Visit]!
}

"""
An enum of possible Species
"""
enum Species {
  CAT
  DOG
}

type SubBreed {
  """
  The Breed to which this SubBreed belongs.
  """
  breed: Breed

  """
  An ISO 8601-formatted string representing the time this SubBreed was added to the system.
  """
  createdAt: DateTime

  """
  A unique identifier for this SubBreed within the MeowWoof system.
  """
  id: String!

  """
  A non-unique name for this SubBreed.
  """
  name: String

  """
  An ISO 8601-formatted string representing the time this SubBreed record was last updated.
  """
  updatedAt: DateTime
}

type Visit {
  checkInTime: DateTime
  checkOutTime: DateTime
  createdAt: DateTime
  id: String!
  person: Person
  pet: Pet
  scheduledEnd: DateTime
  scheduledStart: DateTime
  status: VisitStatus
  totalCost: Float
  type: VisitType
  updatedAt: DateTime
}

input VisitCreateInput {
  personId: String!
  petId: String!
  scheduledStart: String!
  type: VisitType!
}

type VisitError implements ErrorForUI {
  message: String!
  path: String!
}

union VisitResult = Visit | VisitError

enum VisitStatus {
  COMPLETE
  IN_PROGRESS
  SCHEDULED
}

enum VisitType {
  CHECKUP
  EMERGENCY
}

input VisitsFilters {
  visitStatus: VisitStatus
  visitType: VisitType
}
