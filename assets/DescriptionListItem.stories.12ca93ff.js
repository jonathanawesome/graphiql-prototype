import{s as a,r as l,j as r,a as e}from"./index.a4f49f88.js";import{D as n}from"./DescriptionListItem.617a8834.js";import"./SeparatorRound.66afdc91.js";const p=a("div",{display:"flex",flexDirection:"column",gap:24}),o=a("div",{display:"grid",gridTemplateColumns:"200px minmax(300px, 1fr)",gap:24}),c=a("span",{display:"flex",fontSize:13,color:"$gray060",borderRight:"1px solid $gray010",paddingRight:4,marginRight:12}),i=({children:t,note:s})=>r(o,{children:[e(c,{children:s}),t]}),d=()=>{const[t,s]=l.exports.useState("Inline");return r(p,{children:[e("button",{onClick:()=>s("Below"),children:'Set descriptionPlacement "Below"'}),e("button",{onClick:()=>s("Inline"),children:'Set descriptionPlacement "Inline"'}),e(i,{note:"Base",children:e(n,{name:"name",description:"description",descriptionPlacement:t,type:"type"})}),e(i,{note:"FIELD entityType, selected",children:e(n,{name:"name",description:"GraphQL interfaces represent a list of named fields and their arguments. GraphQL objects and interfaces can then implement these interfaces which requires that the implementing type will define all fields defined by those interfaces.",descriptionPlacement:t,entityType:"FIELD",isSelected:!0,type:"type"})}),e(i,{note:"FIELD entityType, selected",children:e(n,{name:"name",description:"GraphQL interfaces represent a list of named fields and their arguments. GraphQL objects and interfaces can then implement these interfaces which requires that the implementing type will define all fields defined by those interfaces.",descriptionPlacement:t,entityType:"FIELD",isSelected:!0,type:"type"})}),e(i,{note:"ARGUMENT entityType, selected",children:e(n,{name:"name",description:"Fields on a GraphQL interface have the same rules as fields on a GraphQL object; their type can be Scalar, Object, Enum, Interface, or Union, or any wrapping type whose base type is one of those five.",descriptionPlacement:t,entityType:"ARGUMENT",isSelected:!0,type:"type"})}),e(i,{note:"INLINE_FRAGMENT entityType, selected",children:e(n,{name:"name",description:"For example, an interface NamedEntity may describe a required field and types such as Person or Business may then implement this interface to guarantee this field will always exist.",descriptionPlacement:t,entityType:"INLINE_FRAGMENT",isSelected:!0,type:"type"})}),e(i,{note:"INPUT_TYPE entityType, selected",children:e(n,{name:"name",description:"Types may also implement multiple interfaces. For example, Business implements both the NamedEntity and ValuedEntity interfaces in the example below.",descriptionPlacement:t,entityType:"INPUT_TYPE",isSelected:!0,type:"type"})}),e(i,{note:"Type as button",children:e(n,{name:"name",description:"Types may also implement multiple interfaces. For example, Business implements both the NamedEntity and ValuedEntity interfaces in the example below.",descriptionPlacement:t,isSelected:!0,type:e("button",{onClick:()=>alert("click!"),children:"type"})})})]})};d.storyName="DescriptionListItem";export{d as DescriptionListItemStory};
